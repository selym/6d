<?php
// $Id: permalink.module,v 1.3.2.7 2009/09/16 21:10:10 toddnienkerk Exp $

/**
 * @file
 * The permalink module permalink-related features to Drupal.
 *
 * Adds permalinks to specific content and provides other features related
 * to permalinks (like a comment permalink page).
 */

define('PERMALINK_NODE_TEXT_DEFAULT', t('Permalink'));
define('PERMALINK_NODE_TITLE_TEXT_DEFAULT', t('Permanent link') .' |');
define('PERMALINK_COMMENT_TEXT_DEFAULT', t('Permalink'));
define('PERMALINK_COMMENT_TITLE_TEXT_DEFAULT', t('Permanent link') .' |');

/**
 * Implementation of hook_menu().
 */
function permalink_menu() {
  $items['admin/settings/permalink'] = array(
    'title' => 'Permalink',
    'description' => t('Configures the permalink that appears in node links.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('permalink_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['comment'] = array(
    'title' => 'Comment permalink',
    'page callback' => 'permalink_comment_permalink',
    'access arguments' => array('access comments'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Displays the settings form.
 */
function permalink_admin_settings() {
  $form = array();

  // Permalinks on nodes
  $form['permalink_node'] = array(
    '#type' => 'fieldset',
    '#title' => t('Node permalinks'),
    '#collapsible' => FALSE,
    '#description' => t('Configure permalink display options for nodes and node teasers.'),
  );

  $form['permalink_node']['permalink_node_text'] = array(
    '#type' => 'textfield',
    '#title' =>  t('Nodes: Link text'),
    '#default_value' => variable_get('permalink_node_text', PERMALINK_NODE_TEXT_DEFAULT),
    '#description' => t('Enter the text you wish to display in the permalink. HTML is not allowed and will be stripped.'),
    '#required' => TRUE,
  );

  $form['permalink_node']['permalink_node_title'] = array(
    '#type' => 'fieldset',
    '#title' => t('Nodes: Link\'s %title attribute', array('%title' => 'title=""')),
    '#collapsible' => FALSE,
    '#description' => t('The %title attribute is used for accessibility and search engine optimization purposes and appears as a tooltip in some browsers.', array('%title' => 'title=""')),
  );
  $form['permalink_node']['permalink_node_title']['permalink_node_title_text'] = array(
    '#type' => 'textfield',
    '#title' => t('Title text'),
    '#default_value' => variable_get('permalink_node_title_text', PERMALINK_NODE_TITLE_TEXT_DEFAULT),
    '#description' => t('Enter the text you wish to be used as the title for the permalink. HTML is not allowed and will be stripped. If you enable the option below, you should include a separator ("|" or ":").', array('%title' => 'title=""')),
    '#required' => FALSE,
  );
  $form['permalink_node']['permalink_node_title']['permalink_node_title_text_append'] = array(
    '#type' => 'checkbox',
    '#title' => t('Append the node title to the link\'s %title attribute.', array('%title' => 'title=""')),
    '#default_value' => variable_get('permalink_node_title_text_append', TRUE),
    '#description' => t('For example, if your title text (above) is <em>Permalink:</em> and the title of your node is <em>My Node</em>, enabling this option will display this link title: <em>Permalink: My Node</em>.'),
  );

  // Permalinks on comments
  $form['permalink_comment'] = array(
    '#type' => 'fieldset',
    '#title' => t('Comment permalinks'),
    '#collapsible' => FALSE,
    '#description' => t('Configure permalink display options for comments.'),
  );

  if (module_exists('comment')) {
    $form['permalink_comment']['permalink_comment_text'] = array(
      '#type' => 'textfield',
      '#title' =>  t('Comments: Link text'),
      '#default_value' => variable_get('permalink_comment_text', PERMALINK_COMMENT_TEXT_DEFAULT),
      '#description' => t('Enter the text you wish to display in the permalink. HTML is not allowed and will be stripped.'),
      '#required' => TRUE,
    );

    $form['permalink_comment']['permalink_comment_title'] = array(
      '#type' => 'fieldset',
      '#title' => t('Comments: Link\'s %title attribute', array('%title' => 'title=""')),
      '#collapsible' => FALSE,
      '#description' => t('The %title attribute is used for accessibility and search engine optimization purposes and appears as a tooltip in some browsers.', array('%title' => 'title=""')),
    );
    $form['permalink_comment']['permalink_comment_title']['permalink_comment_title_text'] = array(
      '#type' => 'textfield',
      '#title' => t('Title text'),
      '#default_value' => variable_get('permalink_comment_title_text', PERMALINK_COMMENT_TITLE_TEXT_DEFAULT),
      '#description' => t('Enter the text you wish to be used as the title for the permalink. HTML is not allowed and will be stripped. If you enable the option below, you should include a separator ("|" or ":").', array('%title' => 'title=""')),
      '#required' => FALSE,
    );
    $form['permalink_comment']['permalink_comment_title']['permalink_comment_title_text_append'] = array(
      '#type' => 'checkbox',
      '#title' => t('Append the comment title to the link\'s %title attribute.', array('%title' => 'title=""')),
      '#default_value' => variable_get('permalink_comment_title_text_append', TRUE),
      '#description' => t('For example, if your title text (above) is <em>Permalink:</em> and the title of your comment is <em>My Comment</em>, enabling this option will display this link title: <em>Permalink: My Comment</em>.'),
    );
  }
  else {
    $form['permalink_comment'] = array(
      '#description' => t('The Comment module is currently disabled.'),
    );
  }

  // All permalinks: Relationship attributes
  $form['permalink_relationships'] = array(
    '#type' => 'fieldset',
    '#title' => t('All permalinks: Link\'s %rel (relationship) attributes', array('%rel' => 'rel=""')),
    '#collapsible' => FALSE,
    '#description' => t('Configure %rel attributes for node, node teaser, and comment permalinks.', array('%rel' => 'rel=""')),
  );
  $form['permalink_relationships']['permalink_nofollow'] = array(
    '#type' => 'checkbox',
    '#title' => t('Add "nofollow"'),
    '#default_value' => variable_get('permalink_nofollow', TRUE),
    '#description' => t('Adds %nofollow to the permalink\'s attributes. Often used for search engine optimization purposes.', array('%nofollow' => 'rel="nofollow"')),
  );
  $form['permalink_relationships']['permalink_bookmark'] = array(
    '#type' => 'checkbox',
    '#title' => t('Add "bookmark"'),
    '#default_value' => variable_get('permalink_bookmark', FALSE),
    '#description' => t('Adds %bookmark to the permalink\'s attributes.', array('%bookmark' => 'rel="bookmark"')),
  );

  return system_settings_form($form);
}

/**
 * Implementation of hook_form_alter().
 */
function permalink_form_node_type_form_alter(&$form, &$form_state) {
  $form['permalink'] = array(
    '#type' => 'fieldset',
    '#title' => t('Permalink settings'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['permalink']['permalink_display_node'] = array(
    '#type' => 'checkbox',
    '#title' => t('Nodes: Add permalink'),
    '#default_value' => variable_get('permalink_display_node_'. $form['#node_type']->type, FALSE),
    '#description' => t('Enabling this option will add permalinks to full-node displays of this content type.'),
  );
  $form['permalink']['permalink_display_node_copybox'] = array(
    '#type' => 'checkbox',
    '#title' => t('Nodes: Add permalink copy-and-paste box'),
    '#default_value' => variable_get('permalink_display_node_copybox_'. $form['#node_type']->type, FALSE),
    '#description' => t('Enabling this option will display the permalink in a box for copying and pasting to full-node displays of this content type.'),
  );
  $form['permalink']['permalink_display_teaser'] = array(
    '#type' => 'checkbox',
    '#title' => t('Teasers: Add permalink'),
    '#default_value' => variable_get('permalink_display_teaser_'. $form['#node_type']->type, FALSE),
    '#description' => t('Enabling this option will add permalinks to all teaser displays of this content type.'),
  );

  if (module_exists('comment')) {
    $form['permalink']['permalink_display_comment'] = array(
      '#type' => 'checkbox',
      '#title' => t('Comments: Add permalink'),
      '#default_value' => variable_get('permalink_display_comment_'. $form['#node_type']->type, FALSE),
      '#description' => t('Enabling this option will add permalinks to all comments of this content type.'),
    );
  }
}

/**
 * Implementation of hook_link().
 */
function permalink_link($type, $object, $teaser = FALSE) {
  $links = array();
  $show_link = FALSE;

  if ($type == 'node') {
    if ($teaser && variable_get('permalink_display_teaser_'. $object->type, FALSE)) {
      $show_link = TRUE;
    }
    else if (!$teaser && variable_get('permalink_display_node_'. $object->type, FALSE)) {
      $show_link = TRUE;
    }
  }
  else if ($type == 'comment') {
    $node = node_load($object->nid);
    if (variable_get('permalink_display_comment_'. $node->type, FALSE)) {
      $show_link = TRUE;
    }
  }

  if ($show_link) {
    $links['permalink'] = permalink_link_render($type, $object);
  }

  return $links;
}

/**
 * Prepares the link for theming.
 *
 * XSS checking and other safety measures are performed here to prevent
 * themers from omitting them.
 */
function permalink_link_render($type, $object) {
  $link = array();
  $link['href'] = 'node/'. $object->nid;
  $link['attributes']['title'] = '';

  $link_text = '';
  $link_title_text = '';
  $show_object_title = FALSE;

  if ($type == 'node') {
    $link_text = variable_get('permalink_node_text', PERMALINK_NODE_TEXT_DEFAULT);
    $link_title_text = variable_get('permalink_node_title_text', PERMALINK_NODE_TITLE_TEXT_DEFAULT);
    $show_object_title = variable_get('permalink_node_title_text_append', TRUE);
    $object_title = $object->title;
  }
  else if ($type == 'comment') {
    $link_text = variable_get('permalink_comment_text', PERMALINK_COMMENT_TEXT_DEFAULT);
    $link_title_text = variable_get('permalink_comment_title_text', PERMALINK_COMMENT_TITLE_TEXT_DEFAULT);
    $show_object_title = variable_get('permalink_comment_title_text_append', TRUE);
    $object_title = $object->subject;

    // Send the link to the custom comment page.
    $link['href'] = 'comment/'. $object->cid;
    $link['fragment'] = 'comment-'. $object->cid;
  }

  // Strip HTML and filter for cross-site scripting (XSS).
  // Remember that $link['title'] is the linked text, not the link's title attribute.
  $link['title'] = filter_xss($link_text, array());

  // Add title attribute
  if ($link_title_text) {
    $link['attributes']['title'] .= $link_title_text;

    if ($show_object_title) {
      $link['attributes']['title'] .= ' ';
    }
  }
  if ($show_object_title) {
    $link['attributes']['title'] .= $object_title;
  }
  // Strip HTML and filter for cross-site scripting (XSS).
  // Replace double quotes with single quotes to prevent breaking of the title attribute.
  $link['attributes']['title'] = str_replace('"', '\'', filter_xss($link['attributes']['title'], array()));

  // Force an absolute link.
  $link['absolute'] = TRUE;

  // Stop Drupal from looking up the alias to the path.
  $link['alias'] = TRUE;

  // We do our own filtering, so prevent double filtering.
  $link['html'] = TRUE;

  // Start building relationship (rel) values.
  $relationships = array();

  // Add rel="nofollow" to link if the option is enabled.
  if (variable_get('permalink_nofollow', TRUE)) {
    $relationships[] = 'nofollow';
  }

  // Add rel="bookmark" to link if the option is enabled.
  if (variable_get('permalink_bookmark', FALSE)) {
    $relationships[] = 'bookmark';
  }

  // Add relations to link if any exist.
  if (!empty($relationships)) {
    $link['attributes']['rel'] = implode(' ', $relationships);
  }

  return $link;
}

/**
 * Implementation of hook_nodeapi().
 */
function permalink_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  switch ($op) {

    case 'view':
      // If this node type is set to display a copybox
      if (variable_get('permalink_display_node_copybox_'. $node->type, FALSE)) {
        $node->content['permalink'] = array(
          '#value' => theme('permalink_copybox', $node),
          '#weight' => 10,
        );
      }
      break;

  }
}

/**
 * Implementation of hook_theme().
 */
function permalink_theme($existing, $type, $theme, $path) {
  return array(
    'permalink_copybox' => array(
      'arguments' => array('node' => NULL),
    ),
  );
}

/**
 * Theme the permalink copybox.
 */
function theme_permalink_copybox($node) {
  // Add stylesheet and JavaScript
  $path = drupal_get_path('module', 'permalink');
  drupal_add_css($path .'/permalink.css');
  drupal_add_js($path .'/permalink.js');

  // Generate URL text
  $link = url('node/'. $node->nid, array('absolute' => TRUE, 'alias' => TRUE));

  $output = '';
  $output .= '<div class="copybox">';
  $output .= '<div class="copybox-footer">' . t( 'Use this url to link to this page' ) . '</div>';
  $output .= '<div class="copybox-link" id="linkText" onMouseover="fnSelect(\'linkText\')">' . $link . '</div>';
  $output .= '<div class="copybox-footer">' . t( 'Mouse over the text to select it, then press Ctrl-C or Command-C to copy it.' ) . '</div>';
  $output .= '</div>';

  return $output;
}

/**
 * Implementation of template_preprocess_node().
 *
 * Add a printable permalink to the node object for themers who don't want to
 * output it in $links.
 */
function permalink_preprocess_node(&$vars) {
  $permalink = permalink_link_render('node', $vars['node']);
  $vars['permalink'] = l($permalink['title'], $permalink['href'], $permalink);
}

/**
 * Implementation of template_preprocess_comment().
 *
 * Add a printable permalink to the comment object for themers who don't want to
 * output it in $links.
 */
function permalink_preprocess_comment(&$vars) {
  $permalink = permalink_link_render('comment', $vars['comment']);
  $vars['permalink'] = l($permalink['title'], $permalink['href'], $permalink);
}

/**
 * Page callback for comment permalink page.
 *
 * Backported from Drupal 7. May need to be removed eventually.
 */
function permalink_comment_permalink() {
  $comment = _comment_load(arg(1));
  $node = node_load($comment->nid);
  if ($node && $comment) {

    // Find the current display page for this comment.
    $page = permalink_comment_get_display_page($comment->cid, $node->type);

    // Set $_GET['q'] and $_GET['page'] ourselves so that the node callback
    // behaves as it would when visiting the page directly.
    $_GET['q'] = 'node/' . $node->nid;
    $_GET['page'] = $page;
    // Allow other modules, like talk, to alter the URL for the comment page.
    $comment_page = module_invoke_all('permalink_comment_page', $comment, $node);
    if (count($comment_page)) {
      $_GET['q'] = $comment_page[count($comment_page) -1];
    }

    // Set the node path as the canonical URL to prevent duplicate content.
    $options = array();
    if ($page) {
      $options = array('query' => 'page='. $page);
    }
    drupal_add_link(array('rel' => 'canonical', 'href' => url('node/' . $node->nid, $options)));

    // Return the node view, this will show the correct comment in context.
    return menu_execute_active_handler($_GET['q']);
  }
  drupal_not_found();
}

/**
 * Return the page number for a comment.
 *
 * Finds the correct page number for a comment taking into account display
 * and paging settings.
 *
 * @param $cid
 *   The comment ID.
 * @param $node_type
 *   The node type the comment is attached to.
 * @return
 *   The page number.
 */
function permalink_comment_get_display_page($cid, $node_type) {
  $ordinal = permalink_comment_get_display_ordinal($cid, $node_type);
  $comments_per_page = variable_get('comment_default_per_page_' . $node_type, 50);
  return floor($ordinal / $comments_per_page);
}

/**
 * Get the display ordinal for a comment, starting from 0.
 *
 * Count the number of comments which appear before the comment we want to
 * display, taking into account display settings and threading.
 *
 * @param $cid
 *   The comment ID.
 * @param $node_type
 *   The node type of the comment's parent.
 * @return
 *   The display ordinal for the comment.
 * @see comment_get_display_page()
 */
function permalink_comment_get_display_ordinal($cid, $node_type) {
  // Count how many comments (c1) are before $cid (c2) in display order. This is
  // the 0-based display ordinal.
  $sql = "SELECT COUNT(*) count FROM {comments} c1 INNER JOIN {comments} c2 ON c2.nid = c1.nid WHERE c2.cid = %d AND ";
  $args[] = $cid;
  if (!user_access('administer comments')) {
    $sql .= 'c1.status ='. COMMENT_PUBLISHED .' AND ';
  }

  // 1 is COMMENT_MODE_THREADED
  // 0 is COMMENT_MODE_FLAT
  $mode = variable_get('comment_default_mode_' . $node_type, 1);
  if ($mode == 0) {
    // For flat comments, cid is used for ordering comments due to
    // unpredicatable behavior with timestamp, so we make the same assumption
    // here.
    $sql .= ' c1.cid < %d ';
    $args[] = $cid;
  }
  else {
    // For threaded comments, the c.thread column is used for ordering. We can
    // use the vancode for comparison, but must remove the trailing slash.
    // @see comment_build_multiple().
    $sql .= ' SUBSTRING(c1.thread, 1, (LENGTH(c1.thread) -1)) < SUBSTRING(c2.thread, 1, (LENGTH(c2.thread) -1)) ';
  }
  $data = db_result(db_query($sql, $args));
  return db_result(db_query($sql, $args));
}